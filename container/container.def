Bootstrap: docker
From: ubuntu:22.04

%labels
    Maintainer MBTMBTMBT
    Version 1.0
    Description "Ubuntu 22.04 + Python 3.10 RL/ML stack (Gym/MuJoCo/OpenGL headless, Jupyter optional)."

%files
    # Provide your pinned Python packages here (same directory when building).
    requirements.txt /opt/requirements.txt

%post
    set -eux

    # -----------------------------
    # Base system & build toolchain
    # -----------------------------
    export DEBIAN_FRONTEND=noninteractive
    apt-get update
    apt-get install -y --no-install-recommends \
        ca-certificates \
        apt-transport-https \
        software-properties-common \
        build-essential \
        cmake \
        git git-lfs \
        wget curl \
        pkg-config \
        patchelf \
        swig \
        tzdata \
        locales

    # -----------------------------
    # Graphics / headless rendering
    # (OpenGL, EGL, OSMesa, GLFW, Xvfb, FFmpeg)
    # -----------------------------
    apt-get install -y --no-install-recommends \
        libgl1 \
        libgl1-mesa-dev \
        libglu1-mesa-dev \
        libegl1 \
        libgles2 \
        libopengl0 \
        libosmesa6 \
        libglfw3 libglfw3-dev \
        libxrandr-dev libxinerama-dev libxcursor-dev \
        libsm6 libxext6 libxrender1 \
        xvfb \
        ffmpeg

    # -----------------------------
    # Image / video / compression libs commonly needed by Python wheels
    # -----------------------------
    apt-get install -y --no-install-recommends \
        zlib1g zlib1g-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libbz2-dev \
        liblzma-dev \
        libssl-dev \
        libreadline-dev \
        libsqlite3-dev \
        libffi-dev \
        libxml2-dev \
        libxslt1-dev \
        xz-utils

    # -----------------------------
    # Python 3.10 stack
    # (Ubuntu 22.04 ships Python 3.10 as default python3)
    # -----------------------------
    apt-get install -y --no-install-recommends \
        python3 \
        python3-dev \
        python3-venv \
        python3-pip

    # Keep pip/setuptools/wheel in a known-good state for building manylinux wheels.
    python3 -m pip install --upgrade --no-cache-dir pip==23.2.1 setuptools wheel

    # -----------------------------
    # (Optional) Rust toolchain for packages that may build native Rust extensions
    # e.g. tokenizers; apt 'cargo' is lighter than running rustup in many setups.
    # -----------------------------
    apt-get install -y --no-install-recommends cargo

    # -----------------------------
    # Locale & timezone
    # -----------------------------
    echo "en_US.UTF-8 UTF-8" > /etc/locale.gen
    locale-gen en_US.UTF-8
    ln -fs /usr/share/zoneinfo/UTC /etc/localtime
    dpkg-reconfigure --frontend noninteractive tzdata

    # -----------------------------
    # Python packages
    # -----------------------------
    # NOTE:
    # - Put your exact pins in /opt/requirements.txt (e.g., torch==2.4.1 + CUDA wheels).
    # - For CUDA PyTorch, either pin the nvidia-cu12 split wheels like your host list,
    #   or use the official PyTorch extra index URL in requirements.txt.
    python3 -m pip install --no-cache-dir -r /opt/requirements.txt

    # -----------------------------
    # Create a convenient workspace and clean up
    # -----------------------------
    mkdir -p /workspace
    chmod -R 777 /workspace

    # Reduce image size
    apt-get clean
    rm -rf /var/lib/apt/lists/*

%environment
    # Minimal, reproducible runtime environment
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export TZ=UTC

    # Prevent OpenMP/MKL over-threading in HPC/login nodes unless overridden by user
    export OMP_NUM_THREADS=1
    export MKL_NUM_THREADS=1

    # Prefer non-interactive, unbuffered Python; avoid pip cache inside the container
    export PYTHONUNBUFFERED=1
    export PIP_NO_CACHE_DIR=1

    # Headless rendering defaults for MuJoCo/Gym. Change to "osmesa" if EGL is unavailable on host.
    export MUJOCO_GL=egl

    # Matplotlib default to non-GUI backend
    export MPLBACKEND=Agg

    # Nice shell prompt when entering the container
    export PS1="Apptainer:\w> "

%runscript
    # Default entrypoint: interactive shell.
    # Examples:
    #   apptainer run --nv your.sif
    #   apptainer exec --nv your.sif python -c "import torch; print(torch.__version__)"
    exec /bin/bash "$@"

%help
    This image provides Ubuntu 22.04 with Python 3.10 and a ML/RL stack that supports
    headless OpenGL (EGL/OSMesa), Gym/MuJoCo, pygame, OpenCV, NumPy/SciPy, etc.

    Usage examples:
      1) Interactive shell:
           apptainer run --nv your.sif
         (Use --nv to pass host NVIDIA drivers into the container for GPU workloads.)

      2) Run a script (headless):
           apptainer exec --nv your.sif python your_script.py

         If a virtual X server is required (e.g. pygame demanding a display), use:
           apptainer exec --nv your.sif xvfb-run -a python your_script.py

      3) Jupyter Lab (if installed via requirements.txt):
           apptainer exec --nv your.sif jupyter lab --ip=0.0.0.0 --no-browser --allow-root

    Notes:
      - Pin CUDA-aware PyTorch/torchvision in /opt/requirements.txt if you need GPU.
      - MUJOCO_GL defaults to egl; switch to osmesa if your host lacks EGL.
      - /workspace is created and writable for convenience (bind your project as needed).
